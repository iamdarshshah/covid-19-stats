{"version":3,"sources":["logo.svg","components/Header/header.js","components/Details/details.js","actions/actionCreators/index.js","actions/actionTypes/index.js","components/Footer/footer.js","components/Dropdown/dropdownSelect.js","components/layout.js","reducers/index.js","store/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","style","width","backgroundColor","className","src","logo","alt","to","textDecoration","color","Details","this","props","fetchData","console","log","countryData","showComponent","Spinner","animation","isLoading","country","Object","keys","data","slice","map","type","Card","key","Body","Title","toUpperCase","Subtitle","href","detail","Text","value","loadingCountryData","Component","connect","state","dispatch","axios","get","then","response","payload","Footer","DropdownSelect","handleChange","e","selectedCountry","target","fetchCountryData","fetchCountryList","countries","countriesList","optionItems","i","name","show","onChange","countryList","actionCreators","Layout","initialState","error","Reducers","action","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","App","exact","component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.16345c62.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.f5e8f462.svg\";","import React from \"react\";\r\nimport logo from \"../../logo.svg\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./header.css\";\r\n\r\nconst Header = () => {\r\n  return (\r\n    <div style={{ width: \"100%\", backgroundColor: \"#282c34\" }}>\r\n      <header className=\"Header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <div>\r\n          <Link to=\"/\" style={{ textDecoration: \"none\", color: \"white\" }}>\r\n            COVID-19\r\n          </Link>\r\n        </div>\r\n      </header>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React, { Component } from \"react\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport * as actionCreators from \"../../actions/actionCreators/index\";\r\nimport { Spinner } from \"react-bootstrap\";\r\nimport { connect } from \"react-redux\";\r\nimport \"./details.css\";\r\n\r\nclass Details extends Component {\r\n  componentDidMount() {\r\n    this.props.fetchData();\r\n  }\r\n  render() {\r\n    console.log(this.props.countryData);\r\n    let showComponent = (\r\n      <div className=\"Spinner\">\r\n        <Spinner animation=\"grow\" />\r\n      </div>\r\n    );\r\n    if (!this.props.isLoading) {\r\n      showComponent =\r\n        this.props.country === \"All\"\r\n          ? Object.keys(this.props.data)\r\n              .slice(0, 3)\r\n              .map(type => {\r\n                return (\r\n                  <Card className=\"Card\" key={type}>\r\n                    <Card.Body>\r\n                      <Card.Title>\r\n                        {type.toUpperCase()}\r\n                        {` (${this.props.country})`}\r\n                      </Card.Title>\r\n                      <Card.Subtitle className=\"mb-2 text-muted\">\r\n                        For More:\r\n                        <a\r\n                          style={{ textDecoration: \"none\" }}\r\n                          href={`${this.props.data[type].detail}`}\r\n                        >\r\n                          &nbsp;Click here\r\n                        </a>\r\n                      </Card.Subtitle>\r\n                      <Card.Text>\r\n                        <b>{this.props.data[type].value}</b>\r\n                      </Card.Text>\r\n                    </Card.Body>\r\n                  </Card>\r\n                );\r\n              })\r\n          : this.props.loadingCountryData\r\n          ? Object.keys(this.props.data)\r\n              .slice(0, 3)\r\n              .map(type => {\r\n                return (\r\n                  <Card className=\"Card\" key={type}>\r\n                    <Card.Body>\r\n                      <Card.Title>\r\n                        {type.toUpperCase()}\r\n                        {` (${this.props.country})`}\r\n                      </Card.Title>\r\n                      <Card.Subtitle className=\"mb-2 text-muted\">\r\n                        For More: Loading....\r\n                      </Card.Subtitle>\r\n                      <Card.Text>loading....</Card.Text>\r\n                    </Card.Body>\r\n                  </Card>\r\n                );\r\n              })\r\n          : Object.keys(this.props.countryData)\r\n              .slice(0, 3)\r\n              .map(type => {\r\n                return (\r\n                  <Card className=\"Card\" key={type}>\r\n                    <Card.Body>\r\n                      <Card.Title>\r\n                        {type.toUpperCase()}\r\n                        {` (${this.props.country})`}\r\n                      </Card.Title>\r\n                      <Card.Subtitle className=\"mb-2 text-muted\">\r\n                        For More:\r\n                        <a\r\n                          style={{ textDecoration: \"none\" }}\r\n                          href={`${this.props.countryData[type].detail}`}\r\n                        >\r\n                          &nbsp;Click here\r\n                        </a>\r\n                      </Card.Subtitle>\r\n                      <Card.Text>\r\n                        <b>{this.props.countryData[type].value}</b>\r\n                      </Card.Text>\r\n                    </Card.Body>\r\n                  </Card>\r\n                );\r\n              });\r\n    }\r\n    return <div className=\"Wrap\">{showComponent}</div>;\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    data: state.data,\r\n    isLoading: state.isLoading,\r\n    country: state.country,\r\n    countryData: state.countryData,\r\n    loadingCountryData: state.loadingCountryData\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    fetchData: () => dispatch(actionCreators.getOverallStatsData())\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Details);\r\n","import * as actionTypes from \"../actionTypes/index\";\r\nimport axios from \"axios\";\r\n\r\nexport function storeStatsData(data) {\r\n  return {\r\n    type: actionTypes.GET_OVERALL_STATS_DATA,\r\n    payload: {\r\n      data: data\r\n    }\r\n  };\r\n}\r\n\r\nexport function getOverallStatsData() {\r\n  return dispatch => {\r\n    axios.get(`https://covid19.mathdro.id/api/`).then(response => {\r\n      dispatch(storeStatsData(response.data));\r\n    });\r\n  };\r\n}\r\n\r\nexport function storeCountryData(data) {\r\n  return {\r\n    type: actionTypes.GET_COUNTRY_LIST,\r\n    payload: {\r\n      data: data\r\n    }\r\n  };\r\n}\r\n\r\nexport function getCountryData() {\r\n  return dispatch => {\r\n    axios.get(`https://covid19.mathdro.id/api/countries`).then(response => {\r\n      dispatch(storeCountryData(response.data.countries));\r\n    });\r\n  };\r\n}\r\n\r\nexport function selectedCountry(data) {\r\n  return {\r\n    type: actionTypes.SELECTED_COUNTRY,\r\n    payload: {\r\n      data\r\n    }\r\n  };\r\n}\r\n\r\nexport function storeSelectedCountryData(data) {\r\n  return {\r\n    type: actionTypes.GET_SELECTED_COUNTRY_DATA,\r\n    payload: {\r\n      data\r\n    }\r\n  };\r\n}\r\n\r\nexport function getSelectedCountryData(country) {\r\n  return dispatch => {\r\n    axios\r\n      .get(`https://covid19.mathdro.id/api/countries/${country.toUpperCase()}`)\r\n      .then(response => {\r\n        dispatch(storeSelectedCountryData(response.data));\r\n      });\r\n  };\r\n}\r\n","export const GET_COUNTRY_LIST = \"GET_COUNTRY_LIST\";\r\nexport const GET_OVERALL_STATS_DATA = \"GET_OVERALL_STATS_DATA\";\r\nexport const SELECTED_COUNTRY = \"SELECTED_COUNTRY\";\r\nexport const GET_SELECTED_COUNTRY_DATA = \"GET_SELECTED_COUNTRY_DATA\";\r\n","import React from \"react\";\r\nimport \"./footer.css\";\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <div>\r\n      <footer className=\"footer\">\r\n        <p>\r\n          &copy;<span>2020</span>\r\n        </p>\r\n      </footer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import React, { Component } from \"react\";\r\nimport * as actionCreators from \"../../actions/actionCreators/index\";\r\nimport { connect } from \"react-redux\";\r\nimport \"./dropdownSelect.css\";\r\n\r\nclass DropdownSelect extends Component {\r\n  componentDidMount() {\r\n    this.props.fetchCountryList();\r\n  }\r\n\r\n  handleChange = e => {\r\n    this.props.selectedCountry(e.target.value);\r\n    this.props.fetchCountryData(e.target.value);\r\n  };\r\n\r\n  render() {\r\n    let countries = this.props.countriesList;\r\n    let optionItems = Object.keys(countries).map(i => (\r\n      <option key={i}>{countries[i].name}</option>\r\n    ));\r\n\r\n    let show = <div></div>;\r\n    if (!this.props.isLoading) {\r\n      show = (\r\n        <div>\r\n          <select onChange={e => this.handleChange(e)}>{optionItems}</select>\r\n        </div>\r\n      );\r\n    }\r\n    return <div>{show}</div>;\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    countriesList: state.countryList,\r\n    isLoading: state.isLoading\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    fetchCountryList: () => dispatch(actionCreators.getCountryData()),\r\n    selectedCountry: country =>\r\n      dispatch(actionCreators.selectedCountry(country)),\r\n    fetchCountryData: country =>\r\n      dispatch(actionCreators.getSelectedCountryData(country))\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DropdownSelect);\r\n","import React from \"react\";\r\nimport Header from \"./Header/header\";\r\nimport Details from \"./Details/details\";\r\nimport Footer from \"./Footer/footer\";\r\nimport Dropdown from \"./Dropdown/dropdownSelect\";\r\n\r\nconst Layout = () => {\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <Details />\r\n      <Dropdown />\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Layout;\r\n","import * as actionTypes from \"../actions/actionTypes/index\";\r\n\r\nconst initialState = {\r\n  data: [],\r\n  countryList: [],\r\n  countryData: [],\r\n  country: \"All\",\r\n  isLoading: true,\r\n  loadingCountryData: true,\r\n  error: null\r\n};\r\n\r\nconst Reducers = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case actionTypes.GET_OVERALL_STATS_DATA:\r\n      return {\r\n        ...state,\r\n        data: action.payload.data,\r\n        isLoading: false\r\n      };\r\n\r\n    case actionTypes.GET_COUNTRY_LIST:\r\n      return {\r\n        ...state,\r\n        countryList: action.payload.data,\r\n        isLoading: false\r\n      };\r\n\r\n    case actionTypes.SELECTED_COUNTRY:\r\n      return {\r\n        ...state,\r\n        country: action.payload.data,\r\n        loadingCountryData: true\r\n      };\r\n\r\n    case actionTypes.GET_SELECTED_COUNTRY_DATA:\r\n      return {\r\n        ...state,\r\n        countryData: action.payload.data,\r\n        loadingCountryData: false\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default Reducers;\r\n","import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport Reducers from \"../reducers/index\";\r\n\r\nimport thunk from \"redux-thunk\";\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst store = createStore(Reducers, composeEnhancers(applyMiddleware(thunk)));\r\n\r\nexport default store;\r\n","import React from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport Layout from \"./components/layout\";\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./store/index\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Provider store={store}>\r\n      <Router>\r\n        <Route exact to=\"/covid-19-stats\" component={Layout} />\r\n      </Router>\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}